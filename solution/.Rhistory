# load necessary packages
library(raster)
# load necessary packages
library(raster)
library(rgdal)
# read in tree cover raster
tree_cover<-raster("tree_cover.tif")
loss<-raster("loss.tif")
# make sure the NA value is set to 255
NAvalue(tree_cover)<-255
NAvalue(loss)<-255
# convert from tree cover to binary map (1/0) using a simple rule (can vary this rule later)
# more than 20% is a forest (1), otherwise it's non-forest (0) (out t0 map)
#Hint: remember that R considers TRUE as 1 and FALSE as 0
t0_map<-tree_cover > 20
# convert from tree cover to binary map (1/0) using a simple rule (can vary this rule later)
# more than 20% is a forest (1), otherwise it's non-forest (0) (out t0 map)
#Hint: remember that R considers TRUE as 1 and FALSE as 0
t0_map<-tree_cover > 20
# plot resulting map
plot(t0_map, main = "Forest Map in t0")
# use focal tool to calculate the amount of deforested neighboors, then divide by window size (n*n)
# set window size to 5 for now, you can vary it later to assess impact on outcomes
n<-5
forNeib <- focal(t0_map, w=matrix(1,n,n), fun=sum)/(n*n)
# ensure that your highest value corresponds to the pixels where your forest map is 1, i.e.
# pixels with value 0 in t0_map should still be 0 in forNeib map
probDef<-t0_map*(1-forNeib)
# visualize map
plot(probDef, main = "Deforestation probability")
# data-driven
# use random uniform number (runif) to convert from probability to binary (change, no change)
probmap<-raster(ncol=ncol(t0_map), nrow=nrow(t0_map), xmx=extent(t0_map)@xmax, xmn=extent(t0_map)@xmin, ymn=extent(t0_map)@ymin, ymx=extent(t0_map)@ymax)
values(probmap)<-runif(1:ncell(probmap))
# mask areas that we're not interested in and ensure 0 in t0_map is 0 in the prob map
probmap<-mask(probmap,t0_map)
probmap<-t0_map*probmap
# if probDef > than the randon U(0,1) probability than it is converted, otherwise it is not
changemap <- probDef > probmap #deforestation map
# plot change map
plot(changemap, main = "Projected Areas to Change From Forest to Non-Forest")
par(mfrow=c(2,1))
# plot change map
plot(changemap, main = "Projected Areas to Change From Forest to Non-Forest")
# plot change map
plot(changemap, main = "Projected Areas to Change From Forest to Non-Forest")
# plot forest map in t1
plot(newForest, main = "Forest Map in t1")
# resulting forest cover
newForest<-t0_map
newForest[changemap==1]<-0
par(mfrow=c(2,1))
# plot change map
plot(changemap, main = "Projected Areas to Change From Forest to Non-Forest")
# plot change map
plot(changemap, main = "Projected Areas to Change From Forest to Non-Forest")
# plot forest map in t1
plot(newForest, main = "Forest Map in t1")
# demand driven
# get the number of pixels that lost forest from the loss map
# get how many 1's you have in the loss tif
N<-table(values(loss))[2]
# now select the highest probability (from probDef) N pixels
# create data frame with cell ID, probability values and initial forest cover (1/0)
ID_prob<-data.frame(ID=1:ncell(probDef), ProbDef=values(probDef), Forest=values(t0_map))
# order the data frame by ascending probability
sort_ID_prob<-ID_prob[order(-ID_prob$ProbDef),]
# convert the Forest value in the first N rows to 0
sort_ID_prob[1:N,3]<-0
# put the dataframe back in the original ID order
rev_ID_prob<-sort_ID_prob[order(sort_ID_prob$ID),]
# create newForest raster based on t0_map
newForest2<-t0_map
# change values for the new Forest values in the dataframe
values(newForest2)<-rev_ID_prob$Forest
# plot results
plot(newForest2, main = "Forest Map in t1 (demand)")
par(mfrow=c(2,1))
# plot results
plot(newForest, main = "Forest Map in t1 (data)")
# plot results
plot(newForest, main = "Forest Map in t1 (data)")
plot(newForest2, main = "Forest Map in t1 (demand)")
# Finally, change raster resolution to 900 x 900 m and get forest and non-forest area per pixel in a .csv
# option b, multiply tree cover by 300 x 300 m and get area of forest (1- that will be non-forest)
tree_cover_area_inkm2<-(tree_cover*300*300)/1000000
# aggregate to 900 x 900 m by summing area in each 300 x 300 m pixels
forest_area<-aggregate(tree_cover_area_inkm2, fact=3, fun = sum)
values(IDmap)<-1:ncell(forest_area)
# creat ID raster (important only if you want to map later the values of cSAR outputs)
IDmap<-raster(ncol=ncol(forest_area), nrow=nrow(forest_area), xmx=extent(forest_area)@xmax, xmn=extent(forest_area)@xmin, ymn=extent(forest_area)@ymin, ymx=extent(forest_area)@ymax)
values(IDmap)<-1:ncell(forest_area)
# create csv with area of forest and no forest, assuming all cells have only forest or no forest
cSAR_data<-data.frame(ID=values(IDmap),Forest=values(forest_area),NonForest=81-values(forest_area))
cSAR_data<-na.omit(cSAR_data)
write.csv(cSAR_data,"LandUse4cSAR.csv", row.names = FALSE)
future_forest<-tree_cover*newForest
# same as above but using your future forest map (t1 map)
future_forest_area_inkm2<-(future_forest*300*300)/1000000
future_forest_area<-aggregate(future_forest_area_inkm2, fact=3, fun = sum)
future_forest_area<-aggregate(future_forest_area_inkm2, fact=3, fun = sum)
cSAR_data<-data.frame(ID=values(IDmap),Forest=values(future_forest_area),NonForest=81-values(future_forest_area))
cSAR_data<-data.frame(ID=values(IDmap),Forest=values(future_forest_area),NonForest=81-values(future_forest_area))
cSAR_data<-na.omit(cSAR_data)
cSAR_data<-na.omit(cSAR_data)
# make sure to export at least two scenarios: one data-driven and one demand-driven
write.csv(cSAR_data,"LandUse4cSAR_future_data.csv", row.names = FALSE)
future_forest<-tree_cover*newForest2
# same as above but using your future forest map (t1 map)
future_forest_area_inkm2<-(future_forest*300*300)/1000000
future_forest_area<-aggregate(future_forest_area_inkm2, fact=3, fun = sum)
future_forest_area<-aggregate(future_forest_area_inkm2, fact=3, fun = sum)
cSAR_data<-data.frame(ID=values(IDmap),Forest=values(future_forest_area),NonForest=81-values(future_forest_area))
future_forest_area<-aggregate(future_forest_area_inkm2, fact=3, fun = sum)
cSAR_data<-data.frame(ID=values(IDmap),Forest=values(future_forest_area),NonForest=81-values(future_forest_area))
cSAR_data<-na.omit(cSAR_data)
# make sure to export at least two scenarios: one data-driven and one demand-driven
write.csv(cSAR_data,"LandUse4cSAR_future_demand.csv", row.names = FALSE)
## you should also export the t1 maps in raster format (for Wednesday class)
writeRaster(newForest, "t1_forest_data.tif")
writeRaster(newForest2, "t1_forest_demand.tif")
## you should also export the t1 maps in raster format (for Wednesday class)
writeRaster(newForest, "t1_forest_data.tif")
writeRaster(newForest2, "t1_forest_demand.tif")
# 1) create empty raster to store results
s<-raster(ncol=ncol(t0_map), nrow=nrow(t0_map), xmx=extent(t0_map)@xmax, xmn=extent(t0_map)@xmin, ymn=extent(t0_map)@ymin, ymx=extent(t0_map)@ymax)
values(s)<-rep(0,ncell(tree_cover))
# 2) run for N (e.g., 100) iterations and compile new probability map
N<-100
for(i in 1:N){
# get a new probability map
probmap<-raster(ncol=ncol(t0_map), nrow=nrow(t0_map), xmx=extent(t0_map)@xmax, xmn=extent(t0_map)@xmin, ymn=extent(t0_map)@ymin, ymx=extent(t0_map)@ymax)
values(probmap)<-runif(1:ncell(probmap))
# mask areas that we're not interested in and ensure 0 in t0_map is 0 in the prob map
probmap<-mask(probmap,t0_map)
probmap<-t0_map*probmap
# get new change map (if probDef higher that probmap, then 1; else then 0)
changemap <- probDef > probmap #deforestation map
# stack it all together
s <- stack(s, changemap)
}
# 4) compile to get final probability
final_prob<-(sum(s)/N)*100
# 5) plot projected rate of change alongside projected map
par(mfrow=c(1,2))
boxplot(cellStats(s, sum)[-1], main = 'Projected Rate of Change')
plot(final_prob, main = 'Ensembled Probability')
writeRaster(final_prob, "ensemble_probability.tif")
focal_prob<-focal(final_prob, w=matrix(1,15,15), fun=mean)
plot(focal_prob, main = 'Ensembled Probability')
plot(focal_prob*t0_map, main = 'Ensembled Probability')
writeRaster(final_prob*t0_map, "ensemble_probability_focal.tif")
