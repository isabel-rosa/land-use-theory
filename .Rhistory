# load necessary packages
library(raster)
r<-raster("tree_cover.tif")
NAvalue(r)<-255
t0_map<-r>20
plot(t0_map)
r
NAvalue(r)
r
t0_map
plot(r)
plot(t0_map)
summary(values(t0_map))
probmap<-raster(ncol=ncol(t0_map), nrow=nrow(t0_map), xmx=extent(t0_map)@xmax, xmn=extent(t0_map)@xmin, ymn=extent(t0_map)@ymin, ymx=extent(t0_map)@ymax)
values(probmap)<-runif(1:ncell(probmap))
probmap2<-mask(t0_map,probmap)
promap2
probmap2
plot(probmap2)
summary(values,probmap2)
summary(values(probmap2))
summary(values(probmap))
probmap2<-mask(probmap,t0_map)
plot(probmap2)
# only for 1s get new map in t1
# rule for conversion if probmap val > runif -- 1 turns to 0 else keep value
changemap<-r > probmap #deforestation map
changemap
plot(changemap)
# create probaibility surface U(0,1) of transition t0->t1
probmap<-raster(ncol=ncol(t0_map), nrow=nrow(t0_map), xmx=extent(t0_map)@xmax, xmn=extent(t0_map)@xmin, ymn=extent(t0_map)@ymin, ymx=extent(t0_map)@ymax)
values(probmap)<-runif(1:ncell(probmap))
probmap<-mask(probmap,t0_map)
# only for 1s get new map in t1
# rule for conversion if probmap val > runif -- 1 turns to 0 else keep value
changemap<-r > probmap #deforestation map
# create empty raster to store results
s<-raster(ncol=100, nrow=100)
values(s)<-rep(0,ncell(r))
ncell(r)
s<-raster(ncol=ncol(t0_map), nrow=nrow(t0_map), xmx=extent(t0_map)@xmax, xmn=extent(t0_map)@xmin, ymn=extent(t0_map)@ymin, ymx=extent(t0_map)@ymax)
values(s)<-rep(0,ncell(r))
s
# 100 iterations and compile new probability map
N<-100
for(i in 1:N){
# get a new probability map
probmap<-raster(ncol=ncol(t0_map), nrow=nrow(t0_map), xmx=extent(t0_map)@xmax, xmn=extent(t0_map)@xmin, ymn=extent(t0_map)@ymin, ymx=extent(t0_map)@ymax)
values(probmap)<-runif(1:ncell(probmap))
probmap<-mask(probmap,t0_map)
# get new change map
changemap <- r > probmap #deforestation map
# stack it all together
s <- stack(s, changemap)
}
# get final probability
final_prob<-(sum(s)/N)*100
final_prob
plot(final_prob)
summary(values(final_prob))
changemap
hist(values(final_prob))
table(values(final_prob))
# glm (logistic regression, change/no change)
glm(changemap~probmap)
probDEFmap<-mask(probmap,t0_map)
r
# covert from tree cover to binary map using rule (can vary this rule later)
r<-raster("tree_cover.tif")
NAvalue(r)<-255
t0_map<-r>20
plot(t0_map)
# create probaibility surface U(0,1) of transition t0->t1
probmap<-raster(ncol=ncol(t0_map), nrow=nrow(t0_map), xmx=extent(t0_map)@xmax, xmn=extent(t0_map)@xmin, ymn=extent(t0_map)@ymin, ymx=extent(t0_map)@ymax)
values(probmap)<-runif(1:ncell(probmap))
probDEFmap<-mask(probmap,t0_map)
# only for 1s get new map in t1
# rule for conversion if probmap val > runif -- 1 turns to 0 else keep value
#changemap<-r > probmap #deforestation map
# glm (logistic regression, change/no change)
# create empty raster to store results
s<-raster(ncol=ncol(t0_map), nrow=nrow(t0_map), xmx=extent(t0_map)@xmax, xmn=extent(t0_map)@xmin, ymn=extent(t0_map)@ymin, ymx=extent(t0_map)@ymax)
values(s)<-rep(0,ncell(r))
# 100 iterations and compile new probability map
N<-100
for(i in 1:N){
# get a new probability map
probmap<-raster(ncol=ncol(t0_map), nrow=nrow(t0_map), xmx=extent(t0_map)@xmax, xmn=extent(t0_map)@xmin, ymn=extent(t0_map)@ymin, ymx=extent(t0_map)@ymax)
values(probmap)<-runif(1:ncell(probmap))
probmap<-mask(probmap,t0_map)
# get new change map
changemap <- probDEFmap > probmap #deforestation map
# stack it all together
s <- stack(s, changemap)
}
# get final probability
final_prob<-(sum(s)/N)*100
final_prob
summary(values(final_prob))
plot(final_prob)
test<-ifelse(t0_map==1,probDEFmap,0)
probmap<-probDEFmap[t0_map==1]
probmap
probmap<-probDEFmap[t0_map==1,]
probmap
# load necessary packages
library(raster)
library(rgdal)
# read in tree cover raster
tree_cover<-raster("tree_cover.tif")
loss<-raster("loss.tif")
# make sure the NA value is set to 255
NAvalue(tree_cover)<-255
# convert from tree cover to binary map (1/0) using a simple rule (can vary this rule later)
# more than 20% is a forest (out t0 map)
tfo_map<-tree_cover > 20
# convert from tree cover to binary map (1/0) using a simple rule (can vary this rule later)
# more than 20% is a forest (out t0 map)
t0_map<-tree_cover > 20
plot(t0_map)
loss
NAvalue(loss)<-255
values(loss)
table(values(loss))
N<-table(values(loss))[1]
N
N<-table(values(loss))[2]
N
probDef
# 1) use focal tool to calculate the amount of deforested neighboors, then divide by 25
# set window size to 5 for now, you can vary it later to assess impact on outcomes
forNeib <- focal(t0_map, w=matrix(1,5,5), fun=sum)/25
# 2) ensure that your highest value corresponds to the pixels where your forest map is 1, i.e.
# pixels with value 0 in t0_map should still be 0 in forNeib map
probDef<-t0_map*(1-forNeib)
#visualize map
plot(probDef[probDef>0], main = 'Deforestation Probability')
probDef
# visualize map
plot(probDef, main = "Deforestation probability")
sort(probDef)
ncell(probDef)
# now select the highest probability (from probDef) N pixels
ID_prob<-data.frame(ID=1:ncell(probDef), ProbDef=values(probDef))
dim(ID_prob)
?sort
sort_ID_prob<-ID_prob[order(-ProbDef),]
# now select the highest probability (from probDef) N pixels
ID_prob<-data.frame(ID=1:ncell(probDef), ProbDef=values(probDef))
sort_ID_prob<-ID_prob[order(-ProbDef),]
sort_ID_prob<-ID_prob[order(-ID_prob$ProbDef),]
head(ID_prob)
head(sort_ID_prob)
sort_ID_prob[1:N,2]<-0
# now select the highest probability (from probDef) N pixels
ID_prob<-data.frame(ID=1:ncell(probDef), ProbDef=values(probDef), Forest=values(t0_map))
sort_ID_prob<-ID_prob[order(-ID_prob$ProbDef),]
sort_ID_prob[1:N,3]<-0
changemap
# data-driven
# 1) use random uniform number to convert from probability to binary (change, no change)
probmap<-raster(ncol=ncol(t0_map), nrow=nrow(t0_map), xmx=extent(t0_map)@xmax, xmn=extent(t0_map)@xmin, ymn=extent(t0_map)@ymin, ymx=extent(t0_map)@ymax)
values(probmap)<-runif(1:ncell(probmap))
# mask areas that we're not interested in and ensure 0 in t0_map is 0 in the prob map
probmap<-mask(probmap,t0_map)
probmap<-t0_map*probmap
# if probDef > than the randon U(0,1) probability than it is converted, otherwise it is not
changemap <- probDef > probmap #deforestation map
# plot results
plot(changemap)
changemap
new_changemap<-changemap
# put back in ID order
back_to_ID<-sort_ID_prob[order(ID_prob$ID),]
head(back_to_ID)
# put back in ID order
back_to_ID<-sort_ID_prob[order(ID_prob$ID),]
head(ID_prob)
# put back in ID order
back_to_ID<-sort_ID_prob[order(ID_prob$ID),]
head(back_to_ID)
# now select the highest probability (from probDef) N pixels
ID_prob<-data.frame(ID=1:ncell(probDef), ProbDef=values(probDef), Forest=values(t0_map))
head(ID_prob)
sort_ID_prob<-ID_prob[order(-ID_prob$ProbDef),]
head(sort_ID_prob)
sort_ID_prob$ID
min(sort_ID_prob$ID)
sort_ID_prob[1:N,3]<-0
min(sort_ID_prob$ID)
table(sort_ID_prob$Forest)
sort_ID_prob[1:N,3]<-0
table(sort_ID_prob$Forest)
# now select the highest probability (from probDef) N pixels
ID_prob<-data.frame(ID=1:ncell(probDef), ProbDef=values(probDef), Forest=values(t0_map))
sort_ID_prob<-ID_prob[order(-ID_prob$ProbDef),]
table(sort_ID_prob$Forest)
sort_ID_prob[1:N,3]<-0
table(sort_ID_prob$Forest)
N
680459-63657
heaD(sort_ID_prob)
head(sort_ID_prob)
# put back in ID order
rev_ID_prob<-sort_ID_prob[order(sort_ID_prob$ID),]
head(rev_ID_prob)
table(rev_ID_prob$Forest)
newForest<-t0_map
values(newForest)<-rev_ID_prob$Forest
plot(newForest)
# resulting forest cover
newForest<-t0_map
newForest[changemap==1]<-0
# resulting forest cover
newForest<-t0_map
table(values(newForest))
newForest[changemap==1]<-0
table(values(newForest))
680459-527368
rm(list=ls())
# load necessary packages
library(raster)
library(rgdal)
# read in tree cover raster
tree_cover<-raster("tree_cover.tif")
loss<-raster("loss.tif")
# make sure the NA value is set to 255
NAvalue(tree_cover)<-255
NAvalue(loss)<-255
# convert from tree cover to binary map (1/0) using a simple rule (can vary this rule later)
# more than 20% is a forest (out t0 map)
t0_map<-tree_cover > 20
plot(t0_map)
# 1) use focal tool to calculate the amount of deforested neighboors, then divide by window size (n*n)
# set window size to 5 for now, you can vary it later to assess impact on outcomes
n<-5
forNeib <- focal(t0_map, w=matrix(1,n,n), fun=sum)/(n*n)
# 2) ensure that your highest value corresponds to the pixels where your forest map is 1, i.e.
# pixels with value 0 in t0_map should still be 0 in forNeib map
probDef<-t0_map*(1-forNeib)
# visualize map
plot(probDef, main = "Deforestation probability")
# data-driven
# use random uniform number (runif) to convert from probability to binary (change, no change)
probmap<-raster(ncol=ncol(t0_map), nrow=nrow(t0_map), xmx=extent(t0_map)@xmax, xmn=extent(t0_map)@xmin, ymn=extent(t0_map)@ymin, ymx=extent(t0_map)@ymax)
values(probmap)<-runif(1:ncell(probmap))
# mask areas that we're not interested in and ensure 0 in t0_map is 0 in the prob map
probmap<-mask(probmap,t0_map)
probmap<-t0_map*probmap
# if probDef > than the randon U(0,1) probability than it is converted, otherwise it is not
changemap <- probDef > probmap #deforestation map
# plot change map
plot(changemap, main = "Projected Areas to Change From Forest to Non-Forest")
# resulting forest cover
newForest<-t0_map
newForest[changemap==1]<-0
# plot forest map in t1
plot(newForest, main = "Forest Map in t1")
# Finally, change raster resolution to 900 x 900 m and get forest and non-forest area per pixel in a .csv
# option b, multiply tree cover by 300 x 300 m and get area of forest (1- that will be non-forest)
tree_cover_area_inkm2<-(tree_cover*300*300)/1000000
# aggregate to 900 x 900 m bu summing area
forest_area<-aggregate(tree_cover_area_inkm2, fact=3, fun = sum)
# creat ID raster
IDmap<-raster(ncol=ncol(forest_area), nrow=nrow(forest_area), xmx=extent(forest_area)@xmax, xmn=extent(forest_area)@xmin, ymn=extent(forest_area)@ymin, ymx=extent(forest_area)@ymax)
values(IDmap)<-1:ncell(forest_area)
# create csv with area of forest and no forest, assuming all cells have only forest or no forest
cSAR_data<-data.frame(ID=values(IDmap),Forest=values(forest_area),NonForest=81-values(forest_area))
cSAR_data<-na.omit(cSAR_data)
write.csv(cSAR_data,"LandUse4cSAR.csv", row.names = FALSE)
# for your scenarios: multiply binary response by original tree cover (assuming full conversion), then multiply by area of pixel (300 x 300 m) and finally aggregate to 900 x 900 m using the sum
future_forest<-tree_cover*newForest
future_forest_area_inkm2<-(future_forest*300*300)/1000000
future_forest_area<-aggregate(future_forest_area_inkm2, fact=3, fun = sum)
cSAR_data<-data.frame(ID=values(IDmap),Forest=values(future_forest_area),NonForest=81-values(future_forest_area))
cSAR_data<-na.omit(cSAR_data)
write.csv(cSAR_data,"LandUse4cSAR_future.csv", row.names = FALSE)
# demand driven
# get the number of pixels that lost forest from the loss map
# get how many 1's you have in the loss tif
N<-table(values(loss))[2]
# now select the highest probability (from probDef) N pixels
# create data frame with cell ID, probability values and initial forest cover (1/0)
ID_prob<-data.frame(ID=1:ncell(probDef), ProbDef=values(probDef), Forest=values(t0_map))
# order the data frame by ascending probability
sort_ID_prob<-ID_prob[order(-ID_prob$ProbDef),]
# convert the Forest value in the first N rows to 0
sort_ID_prob[1:N,3]<-0
# put the dataframe back in the original ID order
rev_ID_prob<-sort_ID_prob[order(sort_ID_prob$ID),]
# create newForest raster based on t0_map
newForest<-t0_map
# change values for the new Forest values in the dataframe
values(newForest)<-rev_ID_prob$Forest
# plot results
plot(newForest, main = "Forest Map in t1 (demand)")
# for your scenarios: multiply binary response by original tree cover (assuming full conversion), then multiply by area of pixel (300 x 300 m) and finally aggregate to 900 x 900 m using the sum
future_forest<-tree_cover*newForest
future_forest_area_inkm2<-(future_forest*300*300)/1000000
future_forest_area<-aggregate(future_forest_area_inkm2, fact=3, fun = sum)
cSAR_data<-data.frame(ID=values(IDmap),Forest=values(future_forest_area),NonForest=81-values(future_forest_area))
cSAR_data<-na.omit(cSAR_data)
write.csv(cSAR_data,"LandUse4cSAR_future_demand.csv", row.names = FALSE)
# export raster
writeRaster(newForest, "t1_forest_data.tif")
writeRaster(newForest2, "t1_forest_demand.tif")
